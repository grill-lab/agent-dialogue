package edu.gla.kail.ad.core;

import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.FixedCredentialsProvider;
import com.google.auth.oauth2.ServiceAccountCredentials;
import com.google.cloud.Tuple;
import com.google.cloud.dialogflow.v2beta1.SessionsClient;
import com.google.cloud.dialogflow.v2beta1.SessionsSettings;
import edu.gla.kail.ad.Client.InputInteraction;
import edu.gla.kail.ad.Client.InteractionType;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

// TODO(Adam): Restructure the entire class!
@RunWith(JUnit4.class)
public class DialogflowAgentTest {
    String _jsonKeyFileLocation;
    String _projectId;
    SessionsClient _sessionsClient;
    String _sessionId; // The sessionID is set in setUp method to a random ID, generated by the
    // same function as the DialogAgentManager uses.
    DialogflowAgent _dialogFlowAgent;

    /**
     * Set up _jsonKeyFileLocation and projectID for the myquotemaster-13899 project.
     */
    @Before
    public void setUp() {
        String currentClassPathFile = Paths
                .get(DialogflowAgentTest
                        .class
                        .getProtectionDomain()
                        .getCodeSource()
                        .getLocation()
                        .getPath())
                .getParent()
                .getParent()
                .toString();

        Path path = Paths.get(currentClassPathFile +
                "/src/main/resources/myquotemaster-13899-04ed41718e57.json");
        _jsonKeyFileLocation = path.toString();
        _projectId = "myquotemaster-13899";
        _sessionId = (new java.sql.Timestamp(System.currentTimeMillis())).toString() + UUID
                .randomUUID().toString();
        try {
            CredentialsProvider credentialsProvider = FixedCredentialsProvider.create(
                    (ServiceAccountCredentials.fromStream(new FileInputStream
                            (_jsonKeyFileLocation))));
            SessionsSettings sessionsSettings = SessionsSettings.newBuilder().setCredentialsProvider
                    (credentialsProvider).build();
            _sessionsClient = SessionsClient.create(sessionsSettings);
            Tuple<String, String> setUpAgentTuple = Tuple.of(_projectId, _jsonKeyFileLocation);
            _dialogFlowAgent = new DialogflowAgent(_sessionId, setUpAgentTuple);
        } catch (Exception exception) {
            fail("SessionClient or DialogflowAgent initialization failed");
        }
    }

    @After
    public void cleanUp() {
        try {
            _sessionsClient.shutdown();
        } catch (Exception e) {
        }
    }

    /**
     * Test setting up the agent with valid parameters.
     */
    @Test
    public void testSetUpAgent() {
        Tuple<String, String> setUpAgentTuple = Tuple.of(_projectId, _jsonKeyFileLocation);
        try {
            DialogflowAgent dialogflowAgent = new DialogflowAgent(_sessionId, setUpAgentTuple);
        } catch (IOException iOException) {
            fail("Setting up the agent with projectID: " + _projectId + " and " +
                    "jsonKeyFileLocation: " + _jsonKeyFileLocation + " was unsuccessful!");
        }
    }

    /**
     * Test setting up the agent with invalid parameters.
     */
    @Test(expected = NullPointerException.class)
    public void testSetUpAgentNullProjectID() {
        Tuple<String, String> setUpAgentTuple = Tuple.of(null, _jsonKeyFileLocation);
        try {
            DialogflowAgent dialogflowAgent = new DialogflowAgent(_sessionId, setUpAgentTuple);
        } catch (IOException iOException) {
            return;
        }
        fail("Setting up the agent with projectID: " + _projectId + " and " +
                "jsonKeyFiletestSetUpAgentEmptySessionIDLocation: " + _jsonKeyFileLocation + " " +
                "was unsuccessful!");
    }

    /**
     * Test setting up the agent with invalid parameters.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testSetUpAgentEmptyProjectID() {
        Tuple<String, String> setUpAgentTuple = Tuple.of("", _jsonKeyFileLocation);
        try {
            DialogflowAgent dialogflowAgent = new DialogflowAgent(_sessionId, setUpAgentTuple);
        } catch (IOException iOException) {
            return;
        }
        fail("Setting up the agent with projectID: " + _projectId + " and " +
                "jsonKeyFileLocation: " + _jsonKeyFileLocation + " was unsuccessful!");
    }

    /**
     * Test setting up the agent with invalid parameters.
     */
    @Test(expected = NullPointerException.class)
    public void testSetUpAgentNullJsonFileLocation() {
        Tuple<String, String> setUpAgentTuple = Tuple.of(_projectId, null);
        try {
            DialogflowAgent dialogflowAgent = new DialogflowAgent(_sessionId, setUpAgentTuple);
        } catch (IOException iOException) {
            return;
        }
        fail("Setting up the agent with projectID: " + _projectId + " and " +
                "jsonKeyFileLocation: " + _jsonKeyFileLocation + " was unsuccessful!");
    }

    /**
     * Test setting up the agent with invalid parameters.
     */
    @Test
    public void testSetUpAgentInvalidJsonFileLocation() {
        Tuple<String, String> setUpAgentTuple = Tuple.of(_projectId, "Invalid file location.");
        try {
            DialogflowAgent dialogflowAgent = new DialogflowAgent(_sessionId, setUpAgentTuple);
        } catch (Exception iOException) {
            return;
        }
        fail("Setting up the agent with projectID: " + _projectId + " and " +
                "jsonKeyFileLocation: " + _jsonKeyFileLocation + " was unsuccessful!");
    }

    /**
     * Test the validation method for a text input with invalid input.
     */
    @Test(expected = IllegalArgumentException.class)
    public void testValidateInputInteraction() {
        InputInteraction inputInteraction = InputInteraction.newBuilder()
                .setType(InteractionType.TEXT)
                .setText("")
                .setDeviceType("iPhone whatever")
                .setLanguageCode("en-US")
                .build();
        _dialogFlowAgent.getResponseFromAgent(inputInteraction);
    }

    @Test
    public void testGetResponseFromAgent() {
        InputInteraction inputInteraction = InputInteraction.newBuilder()
                .setType(InteractionType.TEXT)
                .setText("Hi")
                .setDeviceType("iPhone whatever")
                .setLanguageCode("en-US")
                .build();
        assertTrue("The response from DialogflowAgent is invalid", _dialogFlowAgent
                .getResponseFromAgent(inputInteraction).isInitialized());
    }
}
